#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üéß –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ YouTube
"""

import sys
import time
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, str(Path(__file__).parent.parent))

try:
    from audiobook_downloader.core import AudiobookDownloader, BookInfo
    from utils.youtube_handler import YouTubeErrorHandler, ImprovedSearcher, create_improved_ydl_options
    from config.downloader_config import YDL_CONFIG
    import yt_dlp
    from rich.console import Console
    from rich.progress import Progress
    from rich.panel import Panel
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    sys.exit(1)

console = Console()

class RobustAudiobookDownloader(AudiobookDownloader):
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ —Å –ª—É—á—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    
    def __init__(self, download_dir: str = "downloads"):
        super().__init__(download_dir)
        self.error_handler = YouTubeErrorHandler()
        self.searcher = ImprovedSearcher()
        
    def download_book_robust(self, book: BookInfo) -> bool:
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∫–Ω–∏–≥–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        if book.id in self.downloaded_books:
            console.print(f"[yellow]‚è≠Ô∏è –ö–Ω–∏–≥–∞ —É–∂–µ —Å–∫–∞—á–∞–Ω–∞: {book.full_title}[/yellow]")
            return True
        
        console.print(f"[cyan]üîç –ü–æ–∏—Å–∫: {book.full_title}[/cyan]")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫
        try:
            book_info = {
                'author': book.author,
                'title': book.title,
                'narrator': book.narrator
            }
            
            urls = self.searcher.search_with_fallbacks(book_info, max_results=5)
            
            if not urls:
                console.print(f"[red]‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è: {book.full_title}[/red]")
                return False
            
            console.print(f"[green]‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(urls)} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤[/green]")
            
            # –ü—Ä–æ–±—É–µ–º —Å–∫–∞—á–∞—Ç—å —Å –∫–∞–∂–¥–æ–≥–æ URL
            for i, url in enumerate(urls, 1):
                console.print(f"[blue]üîó –ü–æ–ø—ã—Ç–∫–∞ {i}/{len(urls)}: {url[:60]}...[/blue]")
                
                if self.download_from_url_robust(url, book):
                    console.print(f"[green]‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ: {book.full_title}[/green]")
                    return True
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
                if i < len(urls):
                    time.sleep(3)
            
            console.print(f"[red]‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å: {book.full_title}[/red]")
            return False
            
        except Exception as e:
            console.print(f"[red]üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}[/red]")
            return False
    
    def download_from_url_robust(self, url: str, book: BookInfo) -> bool:
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å URL —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        target_dir = self._get_category_dir(book.category)
        
        # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        safe_title = self._create_safe_filename(book)
        output_file = target_dir / f"{safe_title}.%(ext)s"
        
        # –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è yt-dlp
        ydl_opts = create_improved_ydl_options(target_dir)
        ydl_opts['outtmpl'] = str(output_file)
        
        max_attempts = 3
        for attempt in range(max_attempts):
            try:
                console.print(f"[dim]   üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_attempts}[/dim]")
                
                with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
                    info = ydl.extract_info(url, download=False)
                    
                    if not info:
                        console.print("[red]   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ[/red]")
                        continue
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                    duration = info.get('duration', 0)
                    if duration < 1800:  # –ú–µ–Ω—å—à–µ 30 –º–∏–Ω—É—Ç
                        console.print(f"[yellow]   ‚ö†Ô∏è –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ ({duration//60} –º–∏–Ω)[/yellow]")
                        return False
                    
                    console.print(f"[green]   ‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration//3600}—á {(duration%3600)//60}–º[/green]")
                    
                    # –°–∫–∞—á–∏–≤–∞–µ–º
                    ydl.download([url])
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                    self.downloaded_books[book.id] = book.full_title
                    self._save_progress()
                    
                    console.print(f"[green]   ‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {target_dir}[/green]")
                    return True
                    
            except yt_dlp.utils.DownloadError as e:
                error_msg = str(e)
                console.print(f"[red]   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {error_msg[:100]}...[/red]")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤—è–∑–∞–Ω–æ –ª–∏ —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π YouTube
                if self.error_handler.is_youtube_blocked(error_msg):
                    console.print("[yellow]   üö´ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ YouTube[/yellow]")
                    
                    if self.error_handler.should_retry(url, "youtube_block"):
                        delay = self.error_handler.get_retry_delay(attempt)
                        console.print(f"[dim]   ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {delay:.1f}—Å –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º...[/dim]")
                        time.sleep(delay)
                        continue
                    else:
                        console.print("[red]   üõë –ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è —ç—Ç–æ–≥–æ URL[/red]")
                        return False
                else:
                    # –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ - –ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑
                    if attempt < max_attempts - 1:
                        time.sleep(2)
                        continue
                    else:
                        return False
                        
            except Exception as e:
                console.print(f"[red]   üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}[/red]")
                if attempt < max_attempts - 1:
                    time.sleep(2)
                    continue
                else:
                    return False
        
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º"""
    console.print(Panel(
        "[bold blue]üéß Audiobook Downloader v2.0 (Robust Edition)[/bold blue]\n"
        "[dim]–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –æ–±—Ö–æ–¥–æ–º –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ YouTube[/dim]",
        title="üöÄ –ó–∞–ø—É—Å–∫",
        border_style="blue"
    ))
    
    try:
        from audiobook_downloader.core import AudiobookParser
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        parser = AudiobookParser("data/books.txt")
        books = parser.parse()
        
        console.print(f"[green]‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(books)} –∫–Ω–∏–≥ –≤ —Ñ–∞–π–ª–µ[/green]")
        
        # –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –∑–∞–≥—Ä—É–∑—á–∏–∫
        downloader = RobustAudiobookDownloader()
        
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
        console.print("\n[bold]–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:[/bold]")
        console.print("1. –°–∫–∞—á–∞—Ç—å –≤—Å–µ –∫–Ω–∏–≥–∏")
        console.print("2. –°–∫–∞—á–∞—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω –∫–Ω–∏–≥")
        console.print("3. –°–∫–∞—á–∞—Ç—å –æ–¥–Ω—É –∫–Ω–∏–≥—É")
        
        choice = console.input("\n[bold]–í–∞—à –≤—ã–±–æ—Ä (1-3): [/bold]")
        
        if choice == "1":
            # –í—Å–µ –∫–Ω–∏–≥–∏
            with Progress() as progress:
                task = progress.add_task("[green]–°–∫–∞—á–∏–≤–∞–Ω–∏–µ...", total=len(books))
                successful = 0
                
                for book in books:
                    if downloader.download_book_robust(book):
                        successful += 1
                    progress.advance(task)
                
            console.print(f"\n[green]üéâ –ó–∞–≤–µ—Ä—à–µ–Ω–æ! –£—Å–ø–µ—à–Ω–æ: {successful}/{len(books)}[/green]")
            
        elif choice == "2":
            # –î–∏–∞–ø–∞–∑–æ–Ω
            start = int(console.input("[bold]–ù–∞—á–∞—Ç—å —Å –∫–Ω–∏–≥–∏ ‚Ññ: [/bold]"))
            end = int(console.input("[bold]–ó–∞–∫–æ–Ω—á–∏—Ç—å –Ω–∞ –∫–Ω–∏–≥–µ ‚Ññ: [/bold]"))
            
            filtered_books = [book for book in books if start <= book.id <= end]
            
            with Progress() as progress:
                task = progress.add_task("[green]–°–∫–∞—á–∏–≤–∞–Ω–∏–µ...", total=len(filtered_books))
                successful = 0
                
                for book in filtered_books:
                    if downloader.download_book_robust(book):
                        successful += 1
                    progress.advance(task)
                
            console.print(f"\n[green]üéâ –ó–∞–≤–µ—Ä—à–µ–Ω–æ! –£—Å–ø–µ—à–Ω–æ: {successful}/{len(filtered_books)}[/green]")
            
        elif choice == "3":
            # –û–¥–Ω–∞ –∫–Ω–∏–≥–∞
            book_id = int(console.input("[bold]–ù–æ–º–µ—Ä –∫–Ω–∏–≥–∏: [/bold]"))
            book = next((b for b in books if b.id == book_id), None)
            
            if book:
                if downloader.download_book_robust(book):
                    console.print("[green]‚úÖ –ö–Ω–∏–≥–∞ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–∞![/green]")
                else:
                    console.print("[red]‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∫–Ω–∏–≥—É[/red]")
            else:
                console.print("[red]‚ùå –ö–Ω–∏–≥–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞[/red]")
        
    except KeyboardInterrupt:
        console.print("\n[yellow]üõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º[/yellow]")
    except Exception as e:
        console.print(f"[red]üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}[/red]")

if __name__ == "__main__":
    main()
