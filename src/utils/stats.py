#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ –∞—É–¥–∏–æ–∫–Ω–∏–≥ v3
–ê–Ω–∞–ª–∏–∑ MP3 —Ñ–∞–π–ª–æ–≤
"""

import os
import datetime
from pathlib import Path
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from rich.text import Text

console = Console()

class MP3Stats:
    def __init__(self, downloads_dir: str = None):
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
        if downloads_dir is None:
            current_dir = Path(__file__).parent
            root_dir = current_dir.parent.parent
            self.downloads_dir = root_dir / "downloads"
        else:
            self.downloads_dir = Path(downloads_dir)
        self.mp3_dir = self.downloads_dir / "mp3_audiobooks"
    
    def format_size(self, size_bytes):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞"""
        if size_bytes < 1024*1024:
            return f"{size_bytes/1024:.1f} KB"
        elif size_bytes < 1024*1024*1024:
            return f"{size_bytes/(1024*1024):.1f} MB"
        else:
            return f"{size_bytes/(1024*1024*1024):.1f} GB"
    
    def show_stats(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫—Ä–∞—Å–∏–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É MP3 —Ñ–∞–π–ª–æ–≤"""
        console.print("\n" + "="*50)
        console.print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê MP3 –ê–£–î–ò–û–ö–ù–ò–ì", style="bold green", justify="center")
        console.print("="*50)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏
        if not self.mp3_dir.exists():
            console.print(f"[red]‚ùå –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {self.mp3_dir}[/red]")
            return
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ MP3 —Ñ–∞–π–ª—ã
        mp3_files = list(self.mp3_dir.glob("*.mp3"))
        
        if not mp3_files:
            console.print(f"[yellow]üìä –ù–µ—Ç MP3 —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ: {self.mp3_dir}[/yellow]")
            return
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
        total_files = len(mp3_files)
        total_size = 0
        dates = []
        file_info = []
        
        for mp3_file in mp3_files:
            if mp3_file.exists():
                size = mp3_file.stat().st_size
                total_size += size
                
                # –î–∞—Ç–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
                mod_time = datetime.datetime.fromtimestamp(mp3_file.stat().st_mtime)
                dates.append(mod_time)
                
                file_info.append({
                    'name': mp3_file.name,
                    'size': size,
                    'date': mod_time
                })
        
        # –°–æ–∑–¥–∞—ë–º —Å–≤–æ–¥–∫—É
        overview_text = Text()
        overview_text.append("üéµ –í—Å–µ–≥–æ MP3 —Ñ–∞–π–ª–æ–≤: ", style="bold")
        overview_text.append(str(total_files), style="bold green")
        overview_text.append(f"\nüíæ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: ", style="bold")
        overview_text.append(self.format_size(total_size), style="bold blue")
        
        if dates:
            last_date = max(dates).strftime('%d.%m.%Y %H:%M')
            overview_text.append(f"\nüìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª: ", style="bold")
            overview_text.append(last_date, style="bold magenta")
        
        overview_panel = Panel(overview_text, title="üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", border_style="green")
        console.print(overview_panel)
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ñ–∞–π–ª–æ–≤
        if total_files <= 20:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª–æ–≤ –Ω–µ–º–Ω–æ–≥–æ
            files_table = Table(title="üìã –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤")
            files_table.add_column("–ù–∞–∑–≤–∞–Ω–∏–µ", style="cyan", max_width=40)
            files_table.add_column("–†–∞–∑–º–µ—Ä", style="bold")
            files_table.add_column("–î–∞—Ç–∞", style="dim")
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
            file_info.sort(key=lambda x: x['date'], reverse=True)
            
            for info in file_info:
                name = info['name']
                if len(name) > 40:
                    name = name[:37] + "..."
                
                files_table.add_row(
                    name,
                    self.format_size(info['size']),
                    info['date'].strftime('%d.%m %H:%M')
                )
            
            console.print("\n")
            console.print(files_table)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if total_files > 1:
            avg_size = total_size / total_files
            console.print(f"\n[dim]üí° –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {self.format_size(avg_size)}[/dim]")
        
        console.print(f"\n[dim]üìÇ –ü—É—Ç—å –∫ —Ñ–∞–π–ª–∞–º: {self.mp3_dir}[/dim]")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    stats = MP3Stats()
    stats.show_stats()

if __name__ == "__main__":
    main()
