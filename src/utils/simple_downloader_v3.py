#!/usr/bin/env python3
"""
üéß Simple Audiobook Downloader v3
–ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è –ø—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è –∑–∞–≥—Ä—É–∑—á–∏–∫–∞
"""

import os
import sys
import re
import logging
from pathlib import Path
from typing import List, Optional
from dataclasses import dataclass

try:
    import yt_dlp
    from rich.console import Console
    from rich.progress import Progress, BarColumn, TextColumn, TimeRemainingColumn
    from rich.panel import Panel
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install yt-dlp rich")
    sys.exit(1)

console = Console()
logging.basicConfig(level=logging.INFO, format='%(asctime)s | %(levelname)s | %(message)s')
logger = logging.getLogger(__name__)

@dataclass
class Book:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–Ω–∏–≥–µ"""
    author: str
    title: str
    category: str = ""

class SimpleDownloader:
    """–ü—Ä–æ—Å—Ç–æ–π –∑–∞–≥—Ä—É–∑—á–∏–∫ –∞—É–¥–∏–æ–∫–Ω–∏–≥"""
    
    def __init__(self, books_file: str = None):
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
        current_dir = Path(__file__).parent
        root_dir = current_dir.parent.parent
        
        self.books_file = books_file or str(root_dir / "data" / "books.txt")
        self.download_dir = str(root_dir / "downloads")
        self.mp3_dir = str(root_dir / "downloads" / "mp3_audiobooks")
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        os.makedirs(self.download_dir, exist_ok=True)
        os.makedirs(self.mp3_dir, exist_ok=True)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ yt-dlp –¥–ª—è MP3
        self.ydl_opts = {
            'format': 'bestaudio/best',
            'outtmpl': os.path.join(self.mp3_dir, '%(uploader)s-%(title)s.%(ext)s'),
            'noplaylist': True,
            'extract_flat': False,
            'postprocessors': [{
                'key': 'FFmpegExtractAudio',
                'preferredcodec': 'mp3',
                'preferredquality': '192',
            }],
        }
    
    def load_books(self) -> List[Book]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∫–Ω–∏–≥"""
        books = []
        current_category = ""
        
        try:
            with open(self.books_file, 'r', encoding='utf-8') as f:
                for line in f:
                    line = line.strip()
                    
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                    if not line or line.startswith('#'):
                        continue
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                    if line.startswith('##'):
                        current_category = line.replace('##', '').strip()
                        continue
                    
                    # –ü–∞—Ä—Å–∏–º –∫–Ω–∏–≥—É
                    if ' - ' in line:
                        parts = line.split(' - ', 1)
                        if len(parts) == 2:
                            author = parts[0].strip()
                            title = parts[1].strip()
                            books.append(Book(author=author, title=title, category=current_category))
                    
        except FileNotFoundError:
            console.print(f"[red]‚ùå –§–∞–π–ª {self.books_file} –Ω–µ –Ω–∞–π–¥–µ–Ω[/red]")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–Ω–∏–≥: {e}")
        
        return books
    
    def search_youtube(self, book: Book) -> List[str]:
        """–ü–æ–∏—Å–∫ –Ω–∞ YouTube"""
        search_queries = [
            f"ytsearch3:{book.author} {book.title} –∞—É–¥–∏–æ–∫–Ω–∏–≥–∞",
            f"ytsearch2:{book.author} {book.title} –ø–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è",
            f"ytsearch2:–∞—É–¥–∏–æ–∫–Ω–∏–≥–∞ {book.author} {book.title}",
        ]
        
        urls = []
        
        for query in search_queries:
            try:
                console.print(f"[dim]üîç –ü–æ–∏—Å–∫: {query.split(':')[1][:50]}...[/dim]")
                
                with yt_dlp.YoutubeDL({'quiet': True, 'no_warnings': True}) as ydl:
                    search_results = ydl.extract_info(query, download=False)
                    
                    if 'entries' in search_results and search_results['entries']:
                        for entry in search_results['entries']:
                            if entry and 'webpage_url' in entry:
                                duration = entry.get('duration', 0)
                                title = entry.get('title', '').lower()
                                
                                # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–±–æ–ª—å—à–µ 30 –º–∏–Ω—É—Ç)
                                if duration and duration > 1800:
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å
                                    author_words = book.author.lower().split()
                                    if any(word in title for word in author_words if len(word) > 2):
                                        urls.append(entry['webpage_url'])
                                        console.print(f"[green]   ‚úÖ –ù–∞–π–¥–µ–Ω–æ: {entry.get('title', '')[:60]}...[/green]")
                                        
                                        if len(urls) >= 2:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                                            break
                
                if len(urls) >= 2:
                    break
                    
            except Exception as e:
                logger.debug(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
                continue
        
        return urls
    
    def download_book(self, book: Book) -> bool:
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–π –∫–Ω–∏–≥–∏"""
        console.print(f"üîç –ü–æ–∏—Å–∫: {book.author} - {book.title}")
        
        urls = self.search_youtube(book)
        
        if not urls:
            console.print(f"[red]‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ: {book.author} - {book.title}[/red]")
            return False
        
        # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        safe_author = re.sub(r'[^\w\s-]', '', book.author).strip()
        safe_title = re.sub(r'[^\w\s-]', '', book.title).strip()
        filename = f"{safe_author}-{safe_title}.%(ext)s"
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–Ω–∏–≥–∏ —Å MP3 –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π
        download_opts = {
            'format': 'bestaudio/best',
            'outtmpl': os.path.join(self.mp3_dir, filename),
            'noplaylist': True,
            'extract_flat': False,
            'postprocessors': [{
                'key': 'FFmpegExtractAudio',
                'preferredcodec': 'mp3',
                'preferredquality': '192',
            }],
        }
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        try:
            with yt_dlp.YoutubeDL(download_opts) as ydl:
                ydl.download([urls[0]])
            
            console.print(f"[green]‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ: {book.author} - {book.title}[/green]")
            return True
            
        except Exception as e:
            console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {e}[/red]")
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è {book.title}: {e}")
            return False
    
    def download_books(self, books: List[Book]):
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–Ω–∏–≥"""
        if not books:
            console.print("[yellow]‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ –ø—É—Å—Ç[/yellow]")
            return
        
        successful = 0
        total = len(books)
        
        with Progress(
            TextColumn("[progress.description]{task.description}"),
            BarColumn(),
            TextColumn("[progress.percentage]{task.percentage:>3.0f}%"),
            TimeRemainingColumn(),
            console=console
        ) as progress:
            
            task = progress.add_task("–°–∫–∞—á–∏–≤–∞–Ω–∏–µ...", total=total)
            
            for i, book in enumerate(books):
                if self.download_book(book):
                    successful += 1
                
                progress.advance(task)
        
        console.print(f"\nüéâ –ó–∞–≤–µ—Ä—à–µ–Ω–æ! –£—Å–ø–µ—à–Ω–æ: {successful}/{total}")
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª"""
        books = self.load_books()
        
        if not books:
            console.print("[red]‚ùå –°–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ –ø—É—Å—Ç[/red]")
            return
        
        console.print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(books)} –∫–Ω–∏–≥ –≤ —Ñ–∞–π–ª–µ")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥
        console.print("\nüìö –°–ø–∏—Å–æ–∫ –∫–Ω–∏–≥:")
        for i, book in enumerate(books, 1):
            console.print(f"{i}. {book.author} - {book.title}")
        
        # –í—ã–±–∏—Ä–∞–µ–º —Ä–µ–∂–∏–º
        console.print("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:")
        console.print("1. –°–∫–∞—á–∞—Ç—å –≤—Å–µ –∫–Ω–∏–≥–∏")
        console.print("2. –°–∫–∞—á–∞—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω –∫–Ω–∏–≥")
        console.print("3. –°–∫–∞—á–∞—Ç—å –æ–¥–Ω—É –∫–Ω–∏–≥—É")
        
        try:
            choice = input("\n–í–∞—à –≤—ã–±–æ—Ä (1-3): ").strip()
            
            if choice == "1":
                self.download_books(books)
            elif choice == "2":
                start = int(input("–ù–∞—á–∞—Ç—å —Å –∫–Ω–∏–≥–∏ ‚Ññ: ")) - 1
                end = int(input("–ó–∞–∫–æ–Ω—á–∏—Ç—å –Ω–∞ –∫–Ω–∏–≥–µ ‚Ññ: "))
                if 0 <= start < len(books) and start < end <= len(books):
                    self.download_books(books[start:end])
                else:
                    console.print("[red]‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω[/red]")
            elif choice == "3":
                book_num = int(input("–ù–æ–º–µ—Ä –∫–Ω–∏–≥–∏: ")) - 1
                if 0 <= book_num < len(books):
                    self.download_books([books[book_num]])
                else:
                    console.print("[red]‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–Ω–∏–≥–∏[/red]")
            else:
                console.print("[red]‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä[/red]")
                
        except (ValueError, KeyboardInterrupt):
            console.print("\n[yellow]‚ö†Ô∏è –û—Ç–º–µ–Ω–µ–Ω–æ[/yellow]")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        console.print(Panel.fit(
            "üéß Simple Audiobook Downloader v3\n"
            "–ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ø–æ–∏—Å–∫–æ–º –Ω–∞ YouTube",
            title="üöÄ –ó–∞–ø—É—Å–∫"
        ))
        
        downloader = SimpleDownloader()
        downloader.run()
        
    except KeyboardInterrupt:
        console.print("\n[yellow]‚ö†Ô∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º[/yellow]")
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞: {e}[/red]")
        logger.error(f"–û—à–∏–±–∫–∞ –≤ main: {e}", exc_info=True)

if __name__ == "__main__":
    main()
