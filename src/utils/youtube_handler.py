#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üîß –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å YouTube –∏ –æ–±—Ö–æ–¥–æ–º –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
"""

import time
import random
import requests
from typing import List, Optional, Dict, Any
from pathlib import Path
import logging

class YouTubeErrorHandler:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ YouTube –∏ –ø–æ–∏—Å–∫–∞ –æ–±—Ö–æ–¥–Ω—ã—Ö –ø—É—Ç–µ–π"""
    
    def __init__(self):
        self.failed_attempts = {}
        self.max_retries = 3
        self.base_delay = 2
        
    def should_retry(self, url: str, error_type: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É"""
        key = f"{url}_{error_type}"
        current_attempts = self.failed_attempts.get(key, 0)
        
        if current_attempts >= self.max_retries:
            return False
            
        self.failed_attempts[key] = current_attempts + 1
        return True
    
    def get_retry_delay(self, attempt: int) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º –±—ç–∫–æ—Ñ—Ñ–æ–º"""
        delay = self.base_delay * (2 ** attempt) + random.uniform(0, 1)
        return min(delay, 30)  # –ú–∞–∫—Å–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥
    
    def is_youtube_blocked(self, error_msg: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —Å–≤—è–∑–∞–Ω–∞ –ª–∏ –æ—à–∏–±–∫–∞ —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π YouTube"""
        blocking_indicators = [
            'HTTP Error 403',
            'HTTP Error 429',
            'Sign in to confirm',
            'Video unavailable',
            'Private video',
            'age-restricted',
            'SABR streaming'
        ]
        
        return any(indicator.lower() in error_msg.lower() for indicator in blocking_indicators)

class ImprovedSearcher:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫–æ–≤–∏–∫ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏"""
    
    def __init__(self):
        self.error_handler = YouTubeErrorHandler()
        
    def search_with_fallbacks(self, book_info: dict, max_results: int = 10) -> List[str]:
        """–ü–æ–∏—Å–∫ —Å —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏"""
        try:
            from googlesearch import search
        except ImportError:
            print("‚ùå –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ googlesearch-python –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            return []
        
        search_queries = self._generate_search_queries(book_info)
        all_results = []
        
        for i, query in enumerate(search_queries):
            try:
                print(f"üîç –ü–æ–∏—Å–∫ {i+1}/{len(search_queries)}: {query[:50]}...")
                
                # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã API
                try:
                    # –ù–æ–≤—ã–π API (—Ç–æ–ª—å–∫–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã)
                    results = list(search(query, num_results=max_results, sleep_interval=2))
                except TypeError:
                    try:
                        # –°—Ç–∞—Ä—ã–π API
                        results = list(search(query, num=max_results, stop=max_results, pause=2))
                    except TypeError:
                        # –°–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
                        results = list(search(query))[:max_results]
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                filtered_results = self._filter_results(results, book_info)
                all_results.extend(filtered_results)
                
                if len(all_results) >= 3:  # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    break
                    
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
                time.sleep(3)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
                continue
                time.sleep(3)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
                continue
        
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã, —Å–æ—Ö—Ä–∞–Ω—è—è –ø–æ—Ä—è–¥–æ–∫
        unique_results = []
        seen = set()
        for url in all_results:
            if url not in seen:
                unique_results.append(url)
                seen.add(url)
        
        return unique_results[:max_results]
    
    def _generate_search_queries(self, book_info: dict) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        author = book_info.get('author', '')
        title = book_info.get('title', '')
        narrator = book_info.get('narrator', '')
        
        queries = []
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        if narrator:
            queries.extend([
                f'"{author} {title}" {narrator} –∞—É–¥–∏–æ–∫–Ω–∏–≥–∞',
                f'–∞—É–¥–∏–æ–∫–Ω–∏–≥–∞ {author} {title} {narrator}',
                f'{title} {author} —á–∏—Ç–∞–µ—Ç {narrator}'
            ])
        
        # –ó–∞–ø—Ä–æ—Å—ã –±–µ–∑ —á—Ç–µ—Ü–∞
        queries.extend([
            f'"{author} {title}" –∞—É–¥–∏–æ–∫–Ω–∏–≥–∞ –ø–æ–ª–Ω–∞—è',
            f'–∞—É–¥–∏–æ–∫–Ω–∏–≥–∞ {author} {title} —Å–ª—É—à–∞—Ç—å –æ–Ω–ª–∞–π–Ω',
            f'{title} {author} –∞—É–¥–∏–æ–∫–Ω–∏–≥–∞ —Å–∫–∞—á–∞—Ç—å'
        ])
        
        # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        queries.extend([
            f'{author} {title} –∞—É–¥–∏–æ–∫–Ω–∏–≥–∞',
            f'{title} –∞—É–¥–∏–æ–∫–Ω–∏–≥–∞ {author}'
        ])
        
        return queries
    
    def _filter_results(self, results: List[str], book_info: dict) -> List[str]:
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏"""
        filtered = []
        author = book_info.get('author', '').lower()
        title = book_info.get('title', '').lower()
        
        for url in results:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
            url_lower = url.lower()
            
            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç YouTube –∏ –¥—Ä—É–≥–∏–º –Ω–∞–¥–µ–∂–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
            trusted_sources = ['youtube.com', 'youtu.be', 'vk.com', 'ok.ru']
            is_trusted = any(source in url_lower for source in trusted_sources)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å
            has_author = any(word in url_lower for word in author.split())
            has_title = any(word in url_lower for word in title.split())
            has_audiobook = any(word in url_lower for word in ['–∞—É–¥–∏–æ–∫–Ω–∏–≥–∞', 'audiobook', 'audio'])
            
            # –ò—Å–∫–ª—é—á–∞–µ–º –ø–ª–æ—Ö–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            exclude_terms = ['–∫—Ä–∞—Ç–∫–æ–µ', '–ø–µ—Ä–µ—Å–∫–∞–∑', '–∞–Ω–æ–Ω—Å', '—Ç—Ä–µ–π–ª–µ—Ä']
            is_excluded = any(term in url_lower for term in exclude_terms)
            
            if is_trusted and (has_author or has_title) and has_audiobook and not is_excluded:
                filtered.append(url)
        
        return filtered

def create_improved_ydl_options(output_path: Path) -> Dict[str, Any]:
    """–°–æ–∑–¥–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –æ–ø—Ü–∏–π –¥–ª—è yt-dlp —Å –æ–±—Ö–æ–¥–æ–º –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫"""
    
    return {
        'format': 'bestaudio[ext=m4a]/bestaudio/best',
        'outtmpl': str(output_path / '%(title)s.%(ext)s'),
        'ignoreerrors': True,
        'no_warnings': False,
        'extractaudio': True,
        'audioformat': 'mp3',
        'audioquality': '192',
        'writeinfojson': False,
        'writethumbnail': False,
        'noplaylist': True,
        'extract_flat': False,
        
        # –û–±—Ö–æ–¥–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è YouTube
        'extractor_args': {
            'youtube': {
                'player_client': ['android', 'web', 'ios'],
                'skip': ['dash', 'hls'],
                'player_skip': ['configs'],
            }
        },
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ç–∏
        'retries': 5,
        'socket_timeout': 60,
        'http_chunk_size': 1048576,
        
        # User-Agent –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
        'http_headers': {
            'User-Agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 14_0 like Mac OS X) AppleWebKit/605.1.15'
        }
    }
