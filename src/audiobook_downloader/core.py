#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üéß –ó–∞–≥—Ä—É–∑—á–∏–∫ –∞—É–¥–∏–æ–∫–Ω–∏–≥ v2.0
–ö—Ä–∞—Å–∏–≤—ã–π –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∞—É–¥–∏–æ–∫–Ω–∏–≥

–ê–≤—Ç–æ—Ä: GitHub Copilot
–î–∞—Ç–∞: 10 –∞–≤–≥—É—Å—Ç–∞ 2025
"""

import os
import re
import json
import time
import logging
import sys
from pathlib import Path
from typing import List, Dict, Optional, Tuple
import requests
from urllib.parse import quote, unquote

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
def check_environment():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    missing_packages = []
    
    try:
        import yt_dlp
    except ImportError:
        missing_packages.append('yt-dlp')
    
    try:
        from googlesearch import search
    except ImportError:
        missing_packages.append('googlesearch-python')
    
    try:
        from rich.console import Console
    except ImportError:
        missing_packages.append('rich')
    
    if missing_packages:
        print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–∫–µ—Ç—ã:")
        for package in missing_packages:
            print(f"   - {package}")
        print("\nüí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –∫–æ–º–∞–Ω–¥–æ–π:")
        print(f"pip install {' '.join(missing_packages)}")
        print("\nüîß –ò–ª–∏ –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ:")
        print("source .venv/bin/activate")
        sys.exit(1)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º
check_environment()

import yt_dlp
from googlesearch import search
from dataclasses import dataclass
from rich.console import Console
from rich.progress import Progress, TaskID
from rich.table import Table
from rich.panel import Panel
from rich.text import Text
from rich import print as rprint

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫—Ä–∞—Å–∏–≤–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –ª–æ–≥–∞–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
    current_dir = Path(__file__).parent
    log_dir = current_dir.parent.parent / "logs"
    log_dir.mkdir(exist_ok=True)
    
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s | %(levelname)s | %(message)s',
        handlers=[
            logging.FileHandler(log_dir / 'audiobook_downloader.log', encoding='utf-8'),
            logging.StreamHandler()
        ]
    )
    return logging.getLogger(__name__)

logger = setup_logging()
console = Console()

@dataclass
class BookInfo:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–Ω–∏–≥–µ"""
    id: int
    author: str
    title: str
    subtitle: str = ""
    narrator: str = ""
    year: str = ""
    category: str = ""
    
    @property
    def full_title(self) -> str:
        """–ü–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏"""
        result = f"{self.author} - {self.title}"
        if self.subtitle:
            result += f": {self.subtitle}"
        return result
    
    @property
    def search_query(self) -> str:
        """–ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞"""
        return f"{self.author} {self.title} –∞—É–¥–∏–æ–∫–Ω–∏–≥–∞"
    
    @property
    def filename(self) -> str:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞"""
        safe_name = re.sub(r'[^\w\s\-\.]', '', self.full_title)
        safe_name = re.sub(r'[-\s]+', '-', safe_name)
        return safe_name[:100]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É

class AudiobookParser:
    """–ü–∞—Ä—Å–µ—Ä —Ñ–∞–π–ª–∞ —Å –∞—É–¥–∏–æ–∫–Ω–∏–≥–∞–º–∏"""
    
    def __init__(self, file_path: str):
        self.file_path = Path(file_path)
        
    def parse(self) -> List[BookInfo]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ñ–∞–π–ª–∞ —Å –∫–Ω–∏–≥–∞–º–∏"""
        if not self.file_path.exists():
            raise FileNotFoundError(f"–§–∞–π–ª {self.file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        
        books = []
        current_category = ""
        
        with open(self.file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        lines = content.split('\n')
        
        for line in lines:
            line = line.strip()
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
            if not line or line.startswith('#'):
                continue
            
            # –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if line.startswith('##'):
                current_category = line.replace('##', '').strip()
                continue
            
            # –ü–∞—Ä—Å–∏–Ω–≥ –∫–Ω–∏–≥–∏
            book = self._parse_book_line(line, current_category)
            if book:
                books.append(book)
        
        console.print(f"[green]‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(books)} –∫–Ω–∏–≥ –≤ —Ñ–∞–π–ª–µ[/green]")
        return books
    
    def _parse_book_line(self, line: str, category: str) -> Optional[BookInfo]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ —Å –∫–Ω–∏–≥–æ–π"""
        # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–≤—É—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤:
        # 1. –ù–æ–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π: "1. –ê–≤—Ç–æ—Ä - –ù–∞–∑–≤–∞–Ω–∏–µ | –ß—Ç–µ—Ü: –ò–º—è (2024)"
        # 2. –ü—Ä–æ—Å—Ç–æ–π: "–ê–≤—Ç–æ—Ä - –ù–∞–∑–≤–∞–Ω–∏–µ"
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–æ–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        numbered_pattern = r'^(\d+)\.\s+([^-]+?)\s*-\s*([^|]+?)(?:\s*\|\s*–ß—Ç–µ—Ü:\s*([^(]+?)\s*\((\d{4})\))?$'
        match = re.match(numbered_pattern, line.strip())
        
        if match:
            # –ù–æ–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            book_id = int(match.group(1))
            author = match.group(2).strip()
            title_part = match.group(3).strip()
            narrator = match.group(4).strip() if match.group(4) else ""
            year = match.group(5) if match.group(5) else ""
        else:
            # –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç "–ê–≤—Ç–æ—Ä - –ù–∞–∑–≤–∞–Ω–∏–µ"
            simple_pattern = r'^([^-]+?)\s*-\s*(.+)$'
            simple_match = re.match(simple_pattern, line.strip())
            
            if not simple_match:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å—Ç—Ä–æ–∫—É: {line}")
                return None
            
            # –ü—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID
            import hashlib
            book_id = int(hashlib.md5(line.encode()).hexdigest()[:8], 16) % 100000
            author = simple_match.group(1).strip()
            title_part = simple_match.group(2).strip()
            narrator = ""
            year = ""
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
        if ':' in title_part:
            title, subtitle = title_part.split(':', 1)
            title = title.strip()
            subtitle = subtitle.strip()
        else:
            title = title_part
            subtitle = ""
        
        return BookInfo(
            id=book_id,
            author=author,
            title=title,
            subtitle=subtitle,
            narrator=narrator,
            year=year,
            category=category
        )

class AudiobookDownloader:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∞—É–¥–∏–æ–∫–Ω–∏–≥"""
    
    def __init__(self, download_dir: str = "downloads"):
        self.download_dir = Path(download_dir)
        self.download_dir.mkdir(exist_ok=True)
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è MP3 —Ñ–∞–π–ª–æ–≤
        self.mp3_dir = self.download_dir / "mp3_audiobooks"
        self.mp3_dir.mkdir(exist_ok=True)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è yt-dlp —Å MP3 –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π
        self.ydl_opts = {
            'format': 'bestaudio/best',
            'ignoreerrors': True,
            'no_warnings': True,
            'outtmpl': str(self.mp3_dir / '%(title)s.%(ext)s'),
            'postprocessors': [{
                'key': 'FFmpegExtractAudio',
                'preferredcodec': 'mp3',
                'preferredquality': '192',
            }],
            'writeinfojson': True,
            'writethumbnail': True,
        }
        
        # –§–∞–π–ª –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–∫–∞—á–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥
        self.progress_file = self.download_dir / 'download_progress.json'
        self.downloaded_books = self._load_progress()
    
    def _load_progress(self) -> Dict[int, str]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
        if self.progress_file.exists():
            with open(self.progress_file, 'r', encoding='utf-8') as f:
                return {int(k): v for k, v in json.load(f).items()}
        return {}
    
    def _save_progress(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        with open(self.progress_file, 'w', encoding='utf-8') as f:
            json.dump(self.downloaded_books, f, ensure_ascii=False, indent=2)
    
    def _get_category_dir(self, category: str) -> Path:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π"""
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞
        category_lower = category.lower() if category else ""
        
        # –¢–æ—á–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        if any(keyword in category_lower for keyword in ["–∑–∞—Ä—É–±–µ–∂–Ω–∞—è", "–∑–∞—Ä—É–±–µ–∂", "foreign"]) and \
           any(keyword in category_lower for keyword in ["—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞", "—Ñ—ç–Ω—Ç–µ–∑–∏", "–º–∏—Å—Ç–∏–∫–∞", "—É–∂–∞—Å—ã", "—Ñ–∞–Ω—Ñ–∏–∫–∏", "fantasy"]):
            return self.download_dir / "foreign_fantasy"
        
        elif any(keyword in category_lower for keyword in ["–∑–∞—Ä—É–±–µ–∂–Ω–∞—è", "–∑–∞—Ä—É–±–µ–∂", "foreign"]) and \
             any(keyword in category_lower for keyword in ["–¥–µ—Ç–µ–∫—Ç–∏–≤", "—Ç—Ä–∏–ª–ª–µ—Ä", "–±–æ–µ–≤–∏–∫", "detective", "thriller"]):
            return self.download_dir / "foreign_detective"
        
        elif any(keyword in category_lower for keyword in ["—Ä–æ—Å—Å–∏–π—Å–∫–∞—è", "—Ä—É—Å—Å–∫–∞—è", "russian"]) and \
             any(keyword in category_lower for keyword in ["—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞", "—Ñ—ç–Ω—Ç–µ–∑–∏", "–º–∏—Å—Ç–∏–∫–∞", "—É–∂–∞—Å—ã", "—Ñ–∞–Ω—Ñ–∏–∫–∏", "fantasy"]):
            return self.download_dir / "russian_fantasy"
        
        elif any(keyword in category_lower for keyword in ["—Ä–æ—Å—Å–∏–π—Å–∫–∞—è", "—Ä—É—Å—Å–∫–∞—è", "russian"]) and \
             any(keyword in category_lower for keyword in ["–¥–µ—Ç–µ–∫—Ç–∏–≤", "—Ç—Ä–∏–ª–ª–µ—Ä", "–±–æ–µ–≤–∏–∫", "detective", "thriller"]):
            return self.download_dir / "russian_detective"
        
        # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–≤—Ç–æ—Ä–∞
        return self._guess_category_by_content(category)
    
    def _guess_category_by_content(self, category: str) -> Path:
        """–£–≥–∞–¥—ã–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É"""
        # –°–ø–∏—Å–æ–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∑–∞—Ä—É–±–µ–∂–Ω—ã—Ö –∞–≤—Ç–æ—Ä–æ–≤ —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∏
        foreign_fantasy_authors = [
            "–≥–µ—Ä–±–µ—Ä—Ç", "—Ç–æ–ª–∫–∏–Ω", "–º–∞—Ä—Ç–∏–Ω", "—Ä–æ—É–ª–∏–Ω–≥", "–∫–∏–Ω–≥", "–ª–∞–≤–∫—Ä–∞—Ñ—Ç",
            "–∞–∑–∏–º–æ–≤", "–∫–ª–∞—Ä–∫", "—Ö–∞–π–Ω–ª–∞–π–Ω", "–¥–∏–∫", "–±—Ä—ç–¥–±–µ—Ä–∏", "–ª–µ –≥—É–∏–Ω"
        ]
        
        # –°–ø–∏—Å–æ–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∑–∞—Ä—É–±–µ–∂–Ω—ã—Ö –∞–≤—Ç–æ—Ä–æ–≤ –¥–µ—Ç–µ–∫—Ç–∏–≤–æ–≤
        foreign_detective_authors = [
            "–∫—Ä–∏—Å—Ç–∏", "–¥–æ–π–ª—å", "—Å—Ç–∞—É—Ç", "—á–∞–Ω–¥–ª–µ—Ä", "–º–∞–∫–¥–æ–Ω–∞–ª—å–¥", "–ª–µ–æ–Ω–∞—Ä–¥",
            "–∫–æ–Ω–Ω–µ–ª–ª–∏", "—á–∞–π–ª–¥", "—Ö–∞—Ä—Ä–∏—Å", "–≥—Ä–∏—à—ç–º", "—Ñ–æ–ª–µ—Ç—Ç"
        ]
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–∞–∫ —Ä–æ—Å—Å–∏–π—Å–∫—É—é —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫—É
        return self.download_dir / "russian_fantasy"
    
    def _create_organized_structure(self, book: BookInfo, file_path: Path) -> Path:
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤"""
        category_dir = self._get_category_dir(book.category)
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∞–ø–∫–∏ –ø–æ –∞–≤—Ç–æ—Ä–∞–º (–∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Ä—É—Å—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã)
        author_safe = book.author
        # –ó–∞–º–µ–Ω—è–µ–º —Ä—É—Å—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã –Ω–∞ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ
        cyrillic_to_latin = {
            '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'yo',
            '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm',
            '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u',
            '—Ñ': 'f', '—Ö': 'h', '—Ü': 'ts', '—á': 'ch', '—à': 'sh', '—â': 'sch',
            '—ä': '', '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya',
            '–ê': 'A', '–ë': 'B', '–í': 'V', '–ì': 'G', '–î': 'D', '–ï': 'E', '–Å': 'Yo',
            '–ñ': 'Zh', '–ó': 'Z', '–ò': 'I', '–ô': 'Y', '–ö': 'K', '–õ': 'L', '–ú': 'M',
            '–ù': 'N', '–û': 'O', '–ü': 'P', '–†': 'R', '–°': 'S', '–¢': 'T', '–£': 'U',
            '–§': 'F', '–•': 'H', '–¶': 'Ts', '–ß': 'Ch', '–®': 'Sh', '–©': 'Sch',
            '–™': '', '–´': 'Y', '–¨': '', '–≠': 'E', '–Æ': 'Yu', '–Ø': 'Ya'
        }
        
        # –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è
        for cyr, lat in cyrillic_to_latin.items():
            author_safe = author_safe.replace(cyr, lat)
        
        # –£–¥–∞–ª—è–µ–º –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º
        author_safe = re.sub(r'[^\w\s]', '', author_safe)
        author_safe = re.sub(r'\s+', '_', author_safe.strip())
        
        author_dir = category_dir / author_safe
        author_dir.mkdir(parents=True, exist_ok=True)
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å–µ—Ä–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å —Ü–∏—Ñ—Ä—ã –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏)
        if re.search(r'\d+', book.title):
            series_match = re.search(r'([^0-9]+)', book.title)
            if series_match:
                series_name = series_match.group(1).strip()
                series_safe = re.sub(r'[^\w\s]', '', series_name)
                series_safe = re.sub(r'\s+', '_', series_safe)
                if len(series_safe) > 3:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–∏–∏ –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ–µ
                    series_dir = author_dir / series_safe
                    series_dir.mkdir(parents=True, exist_ok=True)
                    return series_dir
        
        return author_dir
    
    def search_youtube(self, book: BookInfo) -> List[str]:
        """–ü–æ–∏—Å–∫ –Ω–∞ YouTube"""
        try:
            search_queries = [
                f"ytsearch5:{book.search_query} –ø–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è",
                f"ytsearch5:{book.author} {book.title} –∞—É–¥–∏–æ–∫–Ω–∏–≥–∞",
                f"ytsearch3:{book.full_title}"
            ]
            
            urls = []
            for query in search_queries:
                try:
                    with yt_dlp.YoutubeDL({'quiet': True}) as ydl:
                        search_results = ydl.extract_info(query, download=False)
                        
                        if 'entries' in search_results:
                            for entry in search_results['entries']:
                                if entry and 'webpage_url' in entry:
                                    duration = entry.get('duration', 0)
                                    # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –≤–∏–¥–µ–æ (–º–µ–Ω—å—à–µ 30 –º–∏–Ω—É—Ç)
                                    if duration > 1800:  
                                        urls.append(entry['webpage_url'])
                except:
                    continue
            
            return list(set(urls))  # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–∞ YouTube: {e}")
            return []
    
    def download_from_url(self, url: str, book: BookInfo) -> bool:
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å URL —Å –∫—Ä–∞—Å–∏–≤–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π —Ñ–∞–π–ª–æ–≤"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫
            target_dir = self._create_organized_structure(book, None)
            
            # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            filename = self._create_beautiful_filename(book)
            
            opts = self.ydl_opts.copy()
            opts['outtmpl'] = str(target_dir / f"{filename}.%(ext)s")
            
            with yt_dlp.YoutubeDL(opts) as ydl:
                console.print(f"[blue]üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ: {book.full_title}[/blue]")
                console.print(f"[dim]üìÅ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤: {target_dir.relative_to(self.download_dir)}[/dim]")
                
                ydl.download([url])
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                self.downloaded_books[book.id] = {
                    'title': book.full_title,
                    'url': url,
                    'category': book.category,
                    'file_path': str(target_dir / f"{filename}.mp3"),
                    'downloaded_at': time.strftime('%Y-%m-%d %H:%M:%S')
                }
                self._save_progress()
                
                console.print(f"[green]‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ: {book.full_title}[/green]")
                return True
                
        except Exception as e:
            console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è {book.full_title}: {e}[/red]")
            return False
    
    def _create_beautiful_filename(self, book: BookInfo) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∞—Å–∏–≤–æ–≥–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞"""
        # –§–æ—Ä–º–∞—Ç: "–ê–≤—Ç–æ—Ä - –ö–Ω–∏–≥–∞ 01 - –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ (–ß—Ç–µ—Ü, –ì–æ–¥)"
        filename_parts = []
        
        # –ê–≤—Ç–æ—Ä (–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–ª—è —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã)
        author_clean = re.sub(r'[^\w\s]', '', book.author).strip()
        author_clean = re.sub(r'\s+', '_', author_clean)
        filename_parts.append(author_clean)
        
        # –ù–∞–∑–≤–∞–Ω–∏–µ —Å –Ω–æ–º–µ—Ä–æ–º (–µ—Å–ª–∏ –µ—Å—Ç—å)
        title_clean = re.sub(r'[^\w\s\d]', '', book.title).strip()
        title_clean = re.sub(r'\s+', '_', title_clean)
        if book.subtitle:
            subtitle_clean = re.sub(r'[^\w\s\d]', '', book.subtitle).strip()
            subtitle_clean = re.sub(r'\s+', '_', subtitle_clean)
            title_clean += f"_{subtitle_clean}"
        filename_parts.append(title_clean)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        extra_info = []
        if book.narrator:
            narrator_clean = re.sub(r'[^\w\s-]', '', book.narrator).strip()
            extra_info.append(narrator_clean)
        if book.year:
            extra_info.append(book.year)
        
        if extra_info:
            filename_parts.append(f"({', '.join(extra_info)})")
        
        filename = " - ".join(filename_parts)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∏ –æ—á–∏—â–∞–µ–º
        filename = re.sub(r'[-\s]+', '-', filename)
        return filename[:150]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
    
    def download_book(self, book: BookInfo) -> bool:
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–π –∫–Ω–∏–≥–∏"""
        if book.id in self.downloaded_books:
            console.print(f"[yellow]‚è≠Ô∏è –ö–Ω–∏–≥–∞ —É–∂–µ —Å–∫–∞—á–∞–Ω–∞: {book.full_title}[/yellow]")
            return True
        
        console.print(f"[cyan]üîç –ü–æ–∏—Å–∫: {book.full_title}[/cyan]")
        
        # –ü–æ–∏—Å–∫ –Ω–∞ YouTube
        urls = self.search_youtube(book)
        
        if not urls:
            console.print(f"[red]‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è: {book.full_title}[/red]")
            return False
        
        # –ü—Ä–æ–±—É–µ–º —Å–∫–∞—á–∞—Ç—å —Å –ø–µ—Ä–≤—ã—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö URL
        for i, url in enumerate(urls[:3], 1):
            console.print(f"[blue]üîó –ü–æ–ø—ã—Ç–∫–∞ {i}/3: {url}[/blue]")
            if self.download_from_url(url, book):
                return True
            time.sleep(2)
        
        console.print(f"[red]‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å: {book.full_title}[/red]")
        return False
    
    def download_books(self, books: List[BookInfo], start_from: int = 1, limit: Optional[int] = None):
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–Ω–∏–≥"""
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
        filtered_books = [book for book in books if book.id >= start_from]
        if limit:
            filtered_books = filtered_books[:limit]
        
        console.print(Panel(
            f"[bold green]üìö –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ {len(filtered_books)} –∫–Ω–∏–≥[/bold green]",
            title="üéß Audiobook Downloader",
            border_style="green"
        ))
        
        successful = 0
        failed = 0
        
        with Progress() as progress:
            task = progress.add_task("[green]–°–∫–∞—á–∏–≤–∞–Ω–∏–µ...", total=len(filtered_books))
            
            for book in filtered_books:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–∏–≥–µ
                table = Table(title=f"üìñ –ö–Ω–∏–≥–∞ #{book.id}")
                table.add_column("–ü–æ–ª–µ", style="cyan")
                table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", style="white")
                
                table.add_row("–ê–≤—Ç–æ—Ä", book.author)
                table.add_row("–ù–∞–∑–≤–∞–Ω–∏–µ", book.title)
                if book.subtitle:
                    table.add_row("–ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫", book.subtitle)
                if book.narrator:
                    table.add_row("–ß—Ç–µ—Ü", book.narrator)
                if book.year:
                    table.add_row("–ì–æ–¥", book.year)
                table.add_row("–ö–∞—Ç–µ–≥–æ—Ä–∏—è", book.category)
                
                console.print(table)
                
                # –°–∫–∞—á–∏–≤–∞–µ–º
                if self.download_book(book):
                    successful += 1
                else:
                    failed += 1
                
                progress.update(task, advance=1)
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∫–Ω–∏–≥–∞–º–∏
                time.sleep(3)
        
        # –ò—Ç–æ–≥–∏
        result_table = Table(title="üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
        result_table.add_column("–°—Ç–∞—Ç—É—Å", style="bold")
        result_table.add_column("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", style="bold")
        
        result_table.add_row("‚úÖ –£—Å–ø–µ—à–Ω–æ", str(successful), style="green")
        result_table.add_row("‚ùå –ù–µ—É–¥–∞—á–Ω–æ", str(failed), style="red")
        result_table.add_row("üìÅ –ü–∞–ø–∫–∞", str(self.download_dir.absolute()), style="blue")
        
        console.print(result_table)

def show_welcome():
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"""
    welcome_text = Text()
    welcome_text.append("üéß ", style="bold blue")
    welcome_text.append("–ó–∞–≥—Ä—É–∑—á–∏–∫ –∞—É–¥–∏–æ–∫–Ω–∏–≥ v2.0", style="bold green")
    welcome_text.append("\nüìö –ö—Ä–∞—Å–∏–≤—ã–π –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç", style="dim")
    
    console.print(Panel(
        welcome_text,
        title="[bold blue]Audiobook Downloader[/bold blue]",
        border_style="blue",
        padding=(1, 2)
    ))

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    show_welcome()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –∫–Ω–∏–≥–∞–º–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
    current_dir = Path(__file__).parent
    books_file = current_dir.parent.parent / "data" / "books.txt"
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã
    parser = AudiobookParser(str(books_file))
    
    # –ü—É—Ç—å –∫ downloads —Ç–æ–∂–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
    downloads_dir = current_dir.parent.parent / "downloads"
    downloader = AudiobookDownloader(str(downloads_dir))
    
    try:
        # –ü–∞—Ä—Å–∏–º –∫–Ω–∏–≥–∏
        books = parser.parse()
        
        if not books:
            console.print("[red]‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–Ω–∏–≥ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è[/red]")
            return
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        console.print("\n[bold]‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:[/bold]")
        console.print("1. –°–∫–∞—á–∞—Ç—å –≤—Å–µ –∫–Ω–∏–≥–∏")
        console.print("2. –°–∫–∞—á–∞—Ç—å —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞")
        console.print("3. –°–∫–∞—á–∞—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
        
        choice = console.input("\n[bold]–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é (1-3): [/bold]").strip()
        
        start_from = 1
        limit = None
        
        if choice == "2":
            start_from = int(console.input("–° –∫–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –Ω–∞—á–∞—Ç—å: "))
        elif choice == "3":
            limit = int(console.input("–°–∫–æ–ª—å–∫–æ –∫–Ω–∏–≥ —Å–∫–∞—á–∞—Ç—å: "))
            start_input = console.input("–° –∫–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –Ω–∞—á–∞—Ç—å (Enter –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å 1): ").strip()
            if start_input:
                start_from = int(start_input)
        
        # –ó–∞–ø—É—Å–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        downloader.download_books(books, start_from, limit)
        
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞: {e}[/red]")
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()
