#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üéß Audiobook Downloader GUI
–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ –∞—É–¥–∏–æ–∫–Ω–∏–≥
"""

import sys
import os
import json
import threading
from pathlib import Path
from typing import List, Optional
import tkinter as tk
from tkinter import ttk, messagebox, filedialog, scrolledtext
from tkinter.font import Font
import queue

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent))

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
def check_gui_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è GUI"""
    missing = []
    
    try:
        import tkinter as tk
    except ImportError:
        missing.append("tkinter (–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –≤ Python)")
    
    try:
        from src.audiobook_downloader.core import AudiobookDownloader, BookInfo
    except ImportError as e:
        missing.append(f"audiobook_downloader: {e}")
    
    if missing:
        error_msg = "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:\n" + "\n".join(f"- {m}" for m in missing)
        error_msg += "\n\nüí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:\n"
        error_msg += "1. –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ: source .venv/bin/activate\n"
        error_msg += "2. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt\n"
        error_msg += "3. –°—É—â–µ—Å—Ç–≤—É–µ—Ç –º–æ–¥—É–ª—å audiobook_downloader"
        
        try:
            import tkinter as tk
            from tkinter import messagebox
            root = tk.Tk()
            root.withdraw()
            messagebox.showerror("–û—à–∏–±–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π", error_msg)
            root.destroy()
        except:
            print(error_msg)
        
        sys.exit(1)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
check_gui_dependencies()

try:
    from src.audiobook_downloader import AudiobookParser, AudiobookDownloader, BookInfo
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("üìÅ –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –ø–∞–∫–µ—Ç audiobook_downloader –¥–æ—Å—Ç—É–ø–µ–Ω")
    sys.exit(1)

class AudiobookGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("üéß Audiobook Downloader v2.0")
        self.root.geometry("1000x700")
        self.root.minsize(800, 600)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è
        self.setup_styles()
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.books = []
        self.downloader = None
        self.download_thread = None
        self.queue = queue.Queue()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_widgets()
        
        # –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—á–µ—Ä–µ–¥–∏
        self.check_queue()
        
    def setup_styles(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π"""
        style = ttk.Style()
        style.theme_use('clam')
        
        # –¶–≤–µ—Ç–∞
        style.configure('Title.TLabel', font=('Arial', 16, 'bold'))
        style.configure('Heading.TLabel', font=('Arial', 12, 'bold'))
        style.configure('Success.TLabel', foreground='green')
        style.configure('Error.TLabel', foreground='red')
        style.configure('Info.TLabel', foreground='blue')
        
    def create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–æ–≤"""
        # –ì–ª–∞–≤–Ω—ã–π —Ñ—Ä–µ–π–º
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞—Å—Ç—è–≥–∏–≤–∞–Ω–∏—è
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(1, weight=1)
        main_frame.rowconfigure(2, weight=1)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(main_frame, text="üéß Audiobook Downloader v2.0", style='Title.TLabel')
        title_label.grid(row=0, column=0, columnspan=3, pady=(0, 10))
        
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–º
        file_frame = ttk.LabelFrame(main_frame, text="üìö –§–∞–π–ª —Å –∫–Ω–∏–≥–∞–º–∏", padding="5")
        file_frame.grid(row=1, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 10))
        file_frame.columnconfigure(1, weight=1)
        
        self.file_var = tk.StringVar(value="data/books.txt")
        ttk.Label(file_frame, text="–§–∞–π–ª:").grid(row=0, column=0, padx=(0, 5))
        ttk.Entry(file_frame, textvariable=self.file_var, state='readonly').grid(row=0, column=1, sticky=(tk.W, tk.E), padx=(0, 5))
        ttk.Button(file_frame, text="–í—ã–±—Ä–∞—Ç—å", command=self.select_file).grid(row=0, column=2)
        ttk.Button(file_frame, text="–ó–∞–≥—Ä—É–∑–∏—Ç—å", command=self.load_books).grid(row=0, column=3, padx=(5, 0))
        
        # –ü–∞–Ω–µ–ª—å —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–Ω–∏–≥
        books_frame = ttk.LabelFrame(main_frame, text="üìñ –°–ø–∏—Å–æ–∫ –∫–Ω–∏–≥", padding="5")
        books_frame.grid(row=2, column=0, columnspan=2, sticky=(tk.W, tk.E, tk.N, tk.S), pady=(0, 10))
        books_frame.columnconfigure(0, weight=1)
        books_frame.rowconfigure(0, weight=1)
        
        # Treeview –¥–ª—è –∫–Ω–∏–≥
        columns = ('ID', '–ê–≤—Ç–æ—Ä', '–ù–∞–∑–≤–∞–Ω–∏–µ', '–ß—Ç–µ—Ü', '–ì–æ–¥', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è')
        self.books_tree = ttk.Treeview(books_frame, columns=columns, show='headings', height=15)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
        self.books_tree.heading('ID', text='ID')
        self.books_tree.heading('–ê–≤—Ç–æ—Ä', text='–ê–≤—Ç–æ—Ä')
        self.books_tree.heading('–ù–∞–∑–≤–∞–Ω–∏–µ', text='–ù–∞–∑–≤–∞–Ω–∏–µ')
        self.books_tree.heading('–ß—Ç–µ—Ü', text='–ß—Ç–µ—Ü')
        self.books_tree.heading('–ì–æ–¥', text='–ì–æ–¥')
        self.books_tree.heading('–ö–∞—Ç–µ–≥–æ—Ä–∏—è', text='–ö–∞—Ç–µ–≥–æ—Ä–∏—è')
        
        self.books_tree.column('ID', width=50)
        self.books_tree.column('–ê–≤—Ç–æ—Ä', width=150)
        self.books_tree.column('–ù–∞–∑–≤–∞–Ω–∏–µ', width=250)
        self.books_tree.column('–ß—Ç–µ—Ü', width=150)
        self.books_tree.column('–ì–æ–¥', width=60)
        self.books_tree.column('–ö–∞—Ç–µ–≥–æ—Ä–∏—è', width=100)
        
        # –°–∫—Ä–æ–ª–ª–±–∞—Ä –¥–ª—è —Å–ø–∏—Å–∫–∞
        scrollbar = ttk.Scrollbar(books_frame, orient=tk.VERTICAL, command=self.books_tree.yview)
        self.books_tree.configure(yscrollcommand=scrollbar.set)
        
        self.books_tree.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        scrollbar.grid(row=0, column=1, sticky=(tk.N, tk.S))
        
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ–º
        control_frame = ttk.LabelFrame(main_frame, text="‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ–º", padding="5")
        control_frame.grid(row=2, column=2, sticky=(tk.W, tk.E, tk.N, tk.S), padx=(10, 0))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        ttk.Label(control_frame, text="–ù–∞—á–∞—Ç—å —Å –∫–Ω–∏–≥–∏:").grid(row=0, column=0, sticky=tk.W, pady=(0, 5))
        self.start_var = tk.StringVar(value="1")
        ttk.Entry(control_frame, textvariable=self.start_var, width=10).grid(row=0, column=1, sticky=tk.W, pady=(0, 5))
        
        ttk.Label(control_frame, text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–∏–≥:").grid(row=1, column=0, sticky=tk.W, pady=(0, 5))
        self.limit_var = tk.StringVar(value="")
        ttk.Entry(control_frame, textvariable=self.limit_var, width=10).grid(row=1, column=1, sticky=tk.W, pady=(0, 5))
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.download_btn = ttk.Button(control_frame, text="üöÄ –ù–∞—á–∞—Ç—å —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ", command=self.start_download)
        self.download_btn.grid(row=2, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(10, 5))
        
        self.stop_btn = ttk.Button(control_frame, text="‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", command=self.stop_download, state='disabled')
        self.stop_btn.grid(row=3, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 5))
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å
        ttk.Label(control_frame, text="–ü—Ä–æ–≥—Ä–µ—Å—Å:").grid(row=4, column=0, columnspan=2, sticky=tk.W, pady=(10, 5))
        self.progress_var = tk.StringVar(value="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        ttk.Label(control_frame, textvariable=self.progress_var, style='Info.TLabel').grid(row=5, column=0, columnspan=2, sticky=tk.W)
        
        self.progress_bar = ttk.Progressbar(control_frame, mode='determinate')
        self.progress_bar.grid(row=6, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(5, 10))
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats_var = tk.StringVar(value="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å")
        ttk.Label(control_frame, textvariable=self.stats_var, style='Info.TLabel').grid(row=7, column=0, columnspan=2, sticky=tk.W)
        
        # –ü–∞–Ω–µ–ª—å –ª–æ–≥–æ–≤
        log_frame = ttk.LabelFrame(main_frame, text="üìù –õ–æ–≥–∏", padding="5")
        log_frame.grid(row=3, column=0, columnspan=3, sticky=(tk.W, tk.E, tk.N, tk.S), pady=(10, 0))
        log_frame.columnconfigure(0, weight=1)
        log_frame.rowconfigure(0, weight=1)
        
        self.log_text = scrolledtext.ScrolledText(log_frame, height=8, state='disabled')
        self.log_text.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # –†–∞—Å—Ç—è–≥–∏–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–∏
        main_frame.rowconfigure(3, weight=1)
        
    def select_file(self):
        """–í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ —Å –∫–Ω–∏–≥–∞–º–∏"""
        filename = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å –∫–Ω–∏–≥–∞–º–∏",
            filetypes=[("Text files", "*.txt"), ("All files", "*.*")]
        )
        if filename:
            self.file_var.set(filename)
            
    def load_books(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∫–Ω–∏–≥"""
        try:
            file_path = self.file_var.get()
            if not os.path.exists(file_path):
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return
                
            parser = AudiobookParser(file_path)
            self.books = parser.parse()
            
            # –û—á–∏—Å—Ç–∫–∞ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            for item in self.books_tree.get_children():
                self.books_tree.delete(item)
                
            for book in self.books:
                self.books_tree.insert('', 'end', values=(
                    book.id,
                    book.author,
                    f"{book.title}{': ' + book.subtitle if book.subtitle else ''}",
                    book.narrator,
                    book.year,
                    book.category.split()[-1] if book.category else ""  # –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–ª–æ–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                ))
            
            self.log(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.books)} –∫–Ω–∏–≥")
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.books)} –∫–Ω–∏–≥")
            
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
            
    def start_download(self):
        """–ù–∞—á–∞–ª–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
        if not self.books:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥!")
            return
            
        try:
            start_from = int(self.start_var.get()) if self.start_var.get() else 1
            limit = int(self.limit_var.get()) if self.limit_var.get() else None
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–Ω–∏–≥
            filtered_books = [book for book in self.books if book.id >= start_from]
            if limit:
                filtered_books = filtered_books[:limit]
                
            if not filtered_books:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –∫–Ω–∏–≥ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è!")
                return
                
            # UI –∏–∑–º–µ–Ω–µ–Ω–∏—è
            self.download_btn.config(state='disabled')
            self.stop_btn.config(state='normal')
            self.progress_bar.config(maximum=len(filtered_books))
            self.progress_bar.config(value=0)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø—É—Ç–µ–º
            downloads_dir = Path(__file__).parent / "downloads"
            self.downloader = AudiobookDownloader(str(downloads_dir))
            
            # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            self.download_thread = threading.Thread(
                target=self.download_worker,
                args=(filtered_books,),
                daemon=True
            )
            self.download_thread.start()
            
            self.log(f"üöÄ –ù–∞—á–∞—Ç–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ {len(filtered_books)} –∫–Ω–∏–≥")
            
        except ValueError:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è!")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
            
    def download_worker(self, books: List[BookInfo]):
        """–†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
        successful = 0
        failed = 0
        
        for i, book in enumerate(books, 1):
            try:
                # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –≥–ª–∞–≤–Ω—ã–π –ø–æ—Ç–æ–∫
                self.queue.put(('progress', i, len(books), book.full_title))
                
                # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏
                if self.downloader.download_book(book):
                    successful += 1
                    self.queue.put(('success', book.full_title))
                else:
                    failed += 1
                    self.queue.put(('error', book.full_title))
                    
            except Exception as e:
                failed += 1
                self.queue.put(('error', f"{book.full_title}: {e}"))
                
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        self.queue.put(('complete', successful, failed))
        
    def stop_download(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        self.download_btn.config(state='normal')
        self.stop_btn.config(state='disabled')
        self.progress_var.set("–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        self.log("‚èπÔ∏è –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
    def check_queue(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            while True:
                message = self.queue.get_nowait()
                self.process_message(message)
        except queue.Empty:
            pass
        finally:
            self.root.after(100, self.check_queue)
            
    def process_message(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏"""
        msg_type = message[0]
        
        if msg_type == 'progress':
            _, current, total, title = message
            self.progress_bar.config(value=current)
            self.progress_var.set(f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ {current}/{total}")
            self.log(f"üì• [{current}/{total}] {title}")
            
        elif msg_type == 'success':
            _, title = message
            self.log(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {title}")
            
        elif msg_type == 'error':
            _, error = message
            self.log(f"‚ùå –û—à–∏–±–∫–∞: {error}")
            
        elif msg_type == 'complete':
            _, successful, failed = message
            self.download_btn.config(state='normal')
            self.stop_btn.config(state='disabled')
            self.progress_var.set("–ó–∞–≤–µ—Ä—à–µ–Ω–æ")
            self.stats_var.set(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful} | ‚ùå –û—à–∏–±–æ–∫: {failed}")
            self.log(f"üéâ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –£—Å–ø–µ—à–Ω–æ: {successful}, –û—à–∏–±–æ–∫: {failed}")
            messagebox.showinfo("–ì–æ—Ç–æ–≤–æ", f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n–£—Å–ø–µ—à–Ω–æ: {successful}\n–û—à–∏–±–æ–∫: {failed}")
            
    def log(self, message: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥"""
        self.log_text.config(state='normal')
        self.log_text.insert(tk.END, f"{message}\n")
        self.log_text.see(tk.END)
        self.log_text.config(state='disabled')

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è GUI"""
    root = tk.Tk()
    app = AudiobookGUI(root)
    
    # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
    root.update_idletasks()
    x = (root.winfo_screenwidth() // 2) - (root.winfo_width() // 2)
    y = (root.winfo_screenheight() // 2) - (root.winfo_height() // 2)
    root.geometry(f"+{x}+{y}")
    
    try:
        root.mainloop()
    except KeyboardInterrupt:
        pass

if __name__ == "__main__":
    main()
